Bioinformatics 445
Project 1 Report
11 February 2019

Group Members: Thomas Li, , 

Background:
	Polymerase Chain Reaction (PCR) is a method for synthetic DNA replication in which primers, small segments of complementary nucleotide bases, are attached to separated DNA strands and extended to contain a desired subsequence, doubling its presence.
	https://upload.wikimedia.org/wikipedia/commons/5/5a/Tucker_PCR.png

Implementation:
	We represented the DNA as a class containing data members for the forward strand and reverse strand as well as methods to denature the pair (clear the reverse strand and return a new object containing it), bind a primer (given one empty strand and that the primer complement can be found), and extend the primer (given the presence of a primer strand shorter than the template strand). The object-oriented approach allows us to treat data objects as fully-defined, self-contained, abstract entities that are easier to define and manipulate then raw variables.
	The experiment at large involves parameters for template strand length, primer length, extension length, and primer count. A list contains all DNA objects in the experiment, starting with a pair containing the randomly generated template strand and its complement. Denatured strands are appended to the list, which is cycled through to perform bindings and extensions on all strands until a stop condition is reached. A function collects data from the experimental output, including the number of strands, length distribution, and amplification of the target sequence. 
	Due to the single purpose of the program, this is currently all defined globally, though this may change. The global scope also contains two general helper functions: one to randomly generate a strand of DNA from bases and the other to get the complement of a strand of DNA. The latter is called several times throughout the program, including in the binding and extension functions.
	The final results of the experiment are written to a text file so that they can be saved, exported, and reformatted.

Difficulties:
	Even though I've never programmed in Python before, I already knew most of the basic programming concepts through working with C++ and JavaScript and substituting the syntax was relatively easy for the most part. There were a minor hiccups from getting used to immutable strings, having to capitalize "true" and "false", and keeping track of types, but nothing took more than 15 minutes to resolve.

Results:
	asdf

Interpretation: